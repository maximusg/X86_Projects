     1                                  bits 64
     2                                  
     3                                  section .text                           ;main code section
     4                                  
     5                                  global _start                           ;sets _start for linker
     6                                  
     7                                  _start:
     8                                      ; mov rbp, rsp ;not sure what this is
     9                                      ; sub rsp, 128 ;allocate read buffer on stack
    10                                      ; mov rsi, 16  ;max letters 16 *8 =128
    11                                      ; mov rdi, rsp ; point rdi to read buffer
    12                                  
    13 00000000 E820000000                  call _printText                 ;prints msg to stdout
    14                                      ; mov rbp, rsp ;not sure what this is
    15 00000005 4881EC80000000              sub rsp, 128 ;allocate read buffer on stack
    16                                      ; mov rsi, 16  ;max letters 16 *8 =128 not used
    17                                      
    18 0000000C 4889E6                      mov rsi, rsp ; point rdi to read buffer
    19 0000000F E82D000000                  call _getInputAndConvert        ;gets string input from user, and converts it
    20                                     
    21 00000014 E864000000                  call _printOutput             ;prints prints converted input
    22 00000019 E8E2FFFFFF                  call _start                    ;loops to do it again
    23                                      
    24 0000001E B83C000000                  mov     eax, 60                 ;system call number (system exit)
    25 00000023 0F05                    	syscall                         ;call kernal
    26                                  
    27                                  _printText:
    28                                      ; mov r8, rdi ;saves pointer tor rsp -128
    29                                      ; mov r9, rsi ; saves 16 in r9
    30                                  
    31                                  
    32 00000025 B801000000                  mov eax, 1
    33 0000002A BF01000000                  mov edi, 1
    34 0000002F 48BE-                       mov rsi, msg
    34 00000031 [0201000000000000] 
    35 00000039 BA19000000                  mov rdx, msg_len
    36 0000003E 0F05                        syscall
    37                                  
    38                                      ; mov rsi, r8 ; point rsi back to original rsp -128
    39                                      ; mov rdx, r9 ;saves 16 into rdx ?? how is this used?
    40 00000040 C3                          ret;
    41                                  
    42                                  _getInputAndConvert:
    43                                      
    44 00000041 B800000000                  mov eax, 0      ;use stdin
    45 00000046 BF00000000                  mov edi, 0      ; read()
    46 0000004B 0F05                        syscall
    47 0000004D 4889C3                      mov rbx, rax ; save readcount  out of rax into rbx
    48 00000050 488D5424FF                  lea rdx, [rsp -1]   ;get address of the byte preceding read buffer
    49                                  _charRead:
    50 00000055 48FFC2                      inc rdx
    51 00000058 8A02                        mov al, [rdx]
    52 0000005A 3C61                        cmp al, 'a'
    53 0000005C 7C0A                        jl  _upper
    54 0000005E 3C7A                        cmp al, 'z'
    55 00000060 7F14                        jg _checkEnd 
    56 00000062 3420                        xor al, 0x20
    57 00000064 8802                        mov [rdx], al
    58 00000066 EBED                        jmp _charRead
    59                                  _upper:
    60 00000068 3C41                        cmp al, 'A'
    61 0000006A 7C0A                        jl  _checkEnd
    62 0000006C 3C7A                        cmp al, 'z'
    63 0000006E 7F06                        jg _checkEnd
    64 00000070 3420                        xor al, 0x20
    65 00000072 8802                        mov [rdx], al
    66 00000074 EBDF                        jmp _charRead
    67                                  _checkEnd:
    68 00000076 3C0A                        cmp al, 10 ;check for LF
    69 00000078 75DB                        jnz _charRead
    70 0000007A 0F05                        syscall
    71 0000007C C3                          ret
    72                                  
    73                                  _printOutput:
    74                                                   ;rsi is pointing where it needs
    75 0000007D 4889DA                      mov rdx, rbx ;message length into rdix
    76 00000080 BF01000000                  mov rdi, 1
    77 00000085 B801000000                  mov rax,1
    78 0000008A 0F05                        syscall
    79 0000008C C3                          ret
    80                                  
    81                                  
    82                                  
    83                                  
    84                                  
    85                                  
    86                                  
    87                                  
    88                                  section .data
    89                                  
    90 00000000 00<rept>                rctxs: times 256 db 0
    91 00000100 00                      rctxi: db 0
    92 00000101 00                      rctxj: db 0
    93                                  
    94 00000102 506C6561736520656E-     msg: db `Please enter user input:`, 10, ;string to ask user to enter input with return chars LF
    94 0000010B 746572207573657220-
    94 00000114 696E7075743A0A     
    95                                  msg_len equ $-msg
    96                                  
    97                                  
